// Java program to create executor framework and run jobs(threads)

import java.util.concurrent.*;

class PrintJob implements Runnable
{
  String name;
  public PrintJob(String name)
  {
    this.name = name;
  }
  public void run()
  {
    System.out.println(name+"--- Job started by Thread: "+ Thread.currentThread().getName());
    try
    {
      Thread.sleep(5000);   
    }
    catch(InterruptedException e)
    {
    }
    System.out.println(name+"---Job completed by Thread: "+Thread.currentThread().getName());
  }
}

class ExecutorDemo
{
  public static void main(String[] args)
  {
    PrintJob[] jobs = { new PrintJob("Dell"),
                        new PrintJob("Acer"),
                        new PrintJob("Lenovo")};
    ExecutorService service = Executors.newFixedThreadPool(1);
    for(PrintJob job : jobs)
    {
      service.submit(job);
    }
    service.shutdown();
  }
}

/*  Note: In the above program Thread creation and starting the thread executing all the threads will be taken care by ExecutorService.
 *   We do not need to do anything except creating ExecutorService
*/
